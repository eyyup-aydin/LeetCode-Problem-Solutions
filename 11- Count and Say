// https://leetcode.com/problems/count-and-say/description/

// Recursive
class Solution {
    public String countAndSay(int n) {
        if (n == 1) return "1";
        else if (n == 2) return "11";
        else {
            char[] arr = countAndSay(n - 1).toCharArray();
            StringBuilder sb = new StringBuilder();
            int count = 1, i;
            for (i = 1; i < arr.length; i++) {
                if (arr[i] != arr[i - 1]) {
                    sb.append(count).append(arr[i - 1]);
                    count = 1;
                }
                else
                    ++ count;
            }
            sb.append(count).append(arr[i - 1]);
            return sb.toString();
        }
    }
}

// Iterative
/*
class Solution {
    public String countAndSay(int n) {
        if (n == 1) return "1";

        String str = "1";
        StringBuilder sb = new StringBuilder();
        while (n > 1) {
            if (str.equals("1")){
                --n;
                str = "11";
                continue;
            }
            int count = 1;
            char[] arr = str.toCharArray();
            for (int i = 0; i < arr.length - 1; i++) {
                if (arr[i] == arr[i + 1])
                    ++count;
                else {
                    sb.append(count).append(arr[i]);
                    count = 1;
                }
            }
            str = sb.append(count).append(arr[arr.length - 1]).toString();
            sb.delete(0, sb.length());
            --n;
        }

        return str;
    }
}
*/
