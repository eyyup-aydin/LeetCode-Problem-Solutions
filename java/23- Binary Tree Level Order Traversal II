// https://leetcode.com/problems/binary-tree-level-order-traversal-ii/description/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> lists = new ArrayList<>();
        if (root == null) return lists;
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        boolean cond = true;
        while (cond) {
            int size = q.size();
            if (size == 0) cond = false;
            else {
                List<Integer> list = new ArrayList<>();
                while ((size--) > 0) {
                    TreeNode n = q.poll();
                    list.add(n.val);
                    if (n.left != null) q.add(n.left);
                    if (n.right != null) q.add(n.right);
                }
                lists.add(list);
            }
        }
        
        Collections.reverse(lists);
        return lists;
    }
}
