// https://leetcode.com/problems/implement-queue-using-stacks/description/

import java.util.Stack;

class MyQueue {
    private Stack<Integer> stack;
    private Stack<Integer> reversed;

    /** Initialize your data structure here. */
    public MyQueue() {
        stack = new Stack<>();
        reversed = new Stack<>();
    }

    /** Push element x to the back of queue. */
    public void push(int x) {
        stack.push(x);
        fillReverse(stack, reversed);
    }

    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        int val = reversed.pop();
        fillReverse(reversed, stack);
        return val;
    }

    /** Get the front element. */
    public int peek() {
        return reversed.peek();
    }

    /** Returns whether the queue is empty. */
    public boolean empty() {
        return reversed.empty();
    }

    private void fillReverse(Stack<Integer> from, Stack<Integer> to) {
        to.clear();
        Stack<Integer> copy = (Stack<Integer>) from.clone();
        while (!copy.empty())
            to.push(copy.pop());
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
