// https://leetcode.com/problems/intersection-of-two-linked-lists/description/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        int size1 = LLSize(headA);
        int size2 = LLSize(headB);
        if (size1 == 0 || size2 == 0) return null;

        ListNode tempA = headA;
        ListNode tempB = headB;
        
        if (size1 > size2) {
            tempA = subList(tempA, size1 - size2);
        }
        else if (size2 > size1) {
            tempB = subList(tempB, size2 - size1);
        }
        
        do {
            if (tempA == tempB) return tempA;
            tempA = tempA.next;
            tempB = tempB.next;
        } while (tempA != null && tempB != null);
        
        return null;
    }
    
    private ListNode subList(ListNode head, int from) {
        ListNode temp = head;
        for (int i = 0; i < from; i++) {
            temp = temp.next;
        }
        return temp;
    }

    private int LLSize(ListNode head) {
        if (head == null) return 0;
        int c = 0;
        ListNode temp = head;
        while (temp != null) {
            c++;
            temp = temp.next;
        }
        return c;
    }
}
